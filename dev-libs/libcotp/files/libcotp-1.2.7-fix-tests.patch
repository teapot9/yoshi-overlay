From f46bef48fe4977c2723f39305dd80830cc5d59b0 Mon Sep 17 00:00:00 2001
From: Louis Leseur <louis.leseur@gmail.com>
Date: Sun, 8 Jan 2023 08:53:36 +0100
Subject: [PATCH] Fix use-after-free in compute_hmac

The pointer returned by gcry_md_read is allocated within the message
context, it is freed by gcry_md_close.

Closes: https://github.com/paolostivanin/libcotp/issues/33
---
 src/otp.c | 26 ++++++++++++++++++++++++--
 1 file changed, 24 insertions(+), 2 deletions(-)

diff --git a/src/otp.c b/src/otp.c
index e6f7ad8..5468f2c 100644
--- a/src/otp.c
+++ b/src/otp.c
@@ -1,4 +1,5 @@
 #include <stdio.h>
+#include <stdlib.h>
 #include <time.h>
 #include <string.h>
 #include <gcrypt.h>
@@ -137,7 +138,22 @@ compute_hmac(const char *K, long C, int algo)
     }
     gcry_md_write (hd, C_reverse_byte_order, sizeof(C_reverse_byte_order));
     gcry_md_final (hd);
-    unsigned char *hmac = gcry_md_read (hd, algo);
+
+    unsigned char * hmac_tmp = gcry_md_read (hd, algo);
+    if (hmac_tmp == NULL) {
+        fprintf(stderr, "Error getting digest\n");
+        gcry_md_close (hd);
+        return NULL;
+    }
+
+    size_t dlen = gcry_md_get_algo_dlen(algo);
+    unsigned char *hmac = malloc (dlen);
+    if (hmac == NULL) {
+        perror("Error allocating memory");
+        gcry_md_close (hd);
+        return NULL;
+    }
+    memcpy (hmac, hmac_tmp, dlen);
 
     free (secret);
 
@@ -226,8 +242,11 @@ get_hotp(const char *secret, long timestamp, int digits, int algo, cotp_error_t
         *err_code = INVALID_B32_INPUT;
         return NULL;
     }
+
     int tk = truncate(hmac, digits, algo);
     char *token = finalize(digits, tk);
+
+    free(hmac);
     return token;
 }
 
@@ -300,7 +319,10 @@ get_steam_totp_at (const char *secret, long current_timestamp, int period, cotp_
         return NULL;
     }
 
-    return get_steam_code(hmac);
+    char * totp = get_steam_code(hmac);
+
+    free(hmac);
+    return totp;
 }
 
 
